Cron Job 管理基于时间的 Job，即：
在给定时间点只运行一次
周期性地在给定时间点运行
一个 CronJob 对象类似于 crontab （cron table）文件中的一行。它根据指定的预
定计划周期性地运行一个 Job
当使用的 Kubernetes 集群，版本 >= 1.4（对 ScheduledJob），>= 1.5（对 CronJob），当启动 API Server（参考 为集群开启或关闭 API 版本 获取更多信息）时，
通过传递选项 --runtime-config=batch/v2alpha1=true 可以开启 batch/v2alpha1 API。
删除cronjob的时候不会自动删除job，这些job可以用kubectl delete job来删除

限制：
Cron Job 在每次调度运行时间内 大概 会创建一个 Job 对象。我们之所以说 大概 ，是因为在特定的环境下可能会创建两个 Job，或者一个 Job 都没创建。我们尝试少发生这种情况，但却不能完全避免。因此，创建 Job 操作应该是 _幂等的_。
Job 根据它所创建的 Pod 的并行度，负责重试创建 Pod，并就决定这一组 Pod 的成功或失败。Cron Job 根本不会去检查 Pod

.spec.schedule指定任务运行周期，格式同Cron
# ┌───────────── minute (0 - 59)
# │ ┌───────────── hour (0 - 23)
# │ │ ┌───────────── day of the month (1 - 31)
# │ │ │ ┌───────────── month (1 - 12)
# │ │ │ │ ┌───────────── day of the week (0 - 6) (Sunday to Saturday;
# │ │ │ │ │                                   7 is also Sunday on some systems)
# │ │ │ │ │
# │ │ │ │ │
# * * * * * command to execute
.spec.jobTemplate指定需要运行的任务，格式同Job
.spec.startingDeadlineSeconds指定一个CronJob如果没有按时启动（可能规定时间时CronJob controller恰好出现故障），
    依旧能够存活的时间。如果超过了这个设定的时间，那么此CronJob就被标记为Failed。如果不设置这个参数，那么这个CronJob没有超时时间。
.spec.concurrencyPolicy指定任务的并发策略，支持Allow、Forbid和Replace三个选项
    Allow（默认值）：运行并行执行多个Job
    Forbid：禁止并行运行多个Job。如果一个新的Job创建时，正在运行一个旧Job，那么CronJob controller则不会创建这个新Job
    Replace：如果一个新的Job创建时，正在运行一个旧Job，那么CronJob controller会使用这个新Job替代正在运行的旧Job
.spec.successfulJobsHistoryLimit： #成功完成的作业保存多少个，默认为3
.spec.failedJobsHistoryLimit：   #失败的作业保存多少个，默认为1
.spec.suspend ：参数如果设置为true，那么所有将来的定时执行都会被暂停。已经处在运行状态的Job不受影响。默认值为false

apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: hello
spec:
  schedule: "*/1 * * * *"
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: hello
            image: busybox
            args:
            - /bin/sh
            - -c
            - date; echo Hello from the Kubernetes cluster
          restartPolicy: OnFailure
